/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import AFN.AFN;
import AFN.Estado;
import static AFN.Estado.cerraduraEpsilon;
import static AFN.Estado.ir_A;
import static AFN.Estado.mover;
import Utilities.Conjunto;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Migue
 */
public class generarAFD extends javax.swing.JFrame {

    private LinkedList<AFN> conjuntoAFD;
    private int idProc = 0;
    private MenuPrincipal m = new MenuPrincipal(conjuntoAFD, idProc);
    DefaultTableModel modelo;
    /**
     * Creates new form MostrarAFN
     * @param conjuntoAFD
     * @param m
     */
    public generarAFD(LinkedList<AFN> conjuntoAFD, MenuPrincipal m) {
        initComponents();
        this.setTitle("Mostrar AFN");
        this.m = m;
        this.conjuntoAFD = conjuntoAFD;
        /*Inicialización de la tabla*/
        modelo = new DefaultTableModel();
        tblAFN.setModel(modelo);
        modelo.addColumn("Estado");
        for(Character x : conjuntoAFD.get(0).getAlfabeto()){
            modelo.addColumn(x);
        }
        modelo.addColumn("Aceptación");
        modelo.addColumn("Token");
        
        crearAFN();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAFN = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblAFN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblAFN);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        m.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAFN;
    // End of variables declaration//GEN-END:variables

    private void crearAFN() {
        int id=0;
        //Generar Cerradura Epsilon del estado Inicial
        Conjunto S_0 = new Conjunto(id, cerraduraEpsilon(conjuntoAFD.get(0).getEstadoInicial()));
        //Se crea una Cola
        Queue<Conjunto> SConjunto = new LinkedList<Conjunto>();
        ArrayList<Conjunto> TotalConjunto = new ArrayList<Conjunto>();
        //Se ingresa a la cola
        SConjunto.offer(S_0);
        TotalConjunto.add(S_0);
        /* Mientras la cola no este vacia*/
        while(!SConjunto.isEmpty()){
            /* Se saca el elemento de la pila*/
            Conjunto aux = SConjunto.poll();
            System.out.println("------------- Estado " + aux.getId() + "---------------------");
            /* Para cada elemento del alfabeto*/
            for(Character x : conjuntoAFD.get(0).getAlfabeto()){
                int id_temp = -1;
                /* Se hace el ir_a del elemento*/
                HashSet<Estado> auxEdo = new HashSet<Estado>();
                auxEdo = ir_A(aux.getEstados(),x);
                /* Si el Ir_A es vacio, no hay transicion -1*/
                if(auxEdo.isEmpty()){
                    System.out.println(x + "= -1");
                }else{
                    for(Conjunto c : TotalConjunto){
                        if(auxEdo.containsAll(c.getEstados())){
                            id_temp = c.getId();
                        }
                    }
                    if(id_temp != -1){
                        /* Si el conjunto de estados existe, asignar id */
                        System.out.println(x + "= " + id_temp);
                    }else{
                        /* Si no existe crear otro conjunto y agregarlo a la cola */
                        id++;
                        Conjunto S_n = new Conjunto(id, auxEdo);
                        System.out.println(x + "= " + S_n.getId());
                        SConjunto.offer(S_n);
                        TotalConjunto.add(S_n);
                    }
                }
            }
            /* Se verifica si existe un estado final en la pila */
            String token = "-1";
            for(Estado e: aux.getEstados()){
                System.out.println(e);
                if(e.isEdoAcep()){
                    token = e.getToken();
                }
            }
            System.out.println("Token = " + token);
        }
    }
}
